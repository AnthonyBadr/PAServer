@page "/upload"
@using System.IO
@inject PdfService PdfService
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext _context
<InputFile OnChange="@OnInputFileChange" />

<ul>
@foreach (var file in pdfFiles)
{
    <li>
        @file.Name
        <button @onclick="() => DownloadFile(file.Id)">Download</button>
    </li>
}
</ul>

@code {
    private List<PdfFile> pdfFiles;

    protected override async Task OnInitializedAsync()
    {
        pdfFiles = _context.PdfFiles.ToList();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream(2 * 1024 * 1024).CopyToAsync(ms); // Set a limit of 2 MB

            var pdfFile = new PdfFile
                {
                    Name = file.Name,
                    Data = ms.ToArray(),
                    ContentType = file.ContentType
                };

            await PdfService.UploadAsync(pdfFile);
            pdfFiles = await PdfService.GetAllFilesAsync(); // Refresh the file list
        }
    }

    private async Task DownloadFile(Guid id)
    {
        var file = await PdfService.DownloadAsync(id);
        if (file == null || file.Data == null || file.Data.Length == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "File not found or empty");
            return;
        }

        var base64Data = Convert.ToBase64String(file.Data);
        await JSRuntime.InvokeVoidAsync("downloadFile", base64Data, file.Name, file.ContentType);
    }

}

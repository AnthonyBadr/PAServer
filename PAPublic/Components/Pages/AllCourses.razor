@page "/AllCourse"
@using Microsoft.AspNetCore.Components.Web.Extensions
@using System.Security.Claims
@inject ApplicationDbContext _context
@inject NavigationManager _navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Total Fee: @Sum</h1>

<h1>Courses to Enroll In</h1>
@if (UnenrolledCourses.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Fee</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in UnenrolledCourses)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.Fee</td>
                    <td>
                        <button @onclick="() => Enroll(item)">Enroll</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h1>Enrolled Courses</h1>
@if (EnrolledCourses.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Fee</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in EnrolledCourses)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.Fee</td>
                    <td>
                        <button @onclick="() => Drop(item.Id)">Drop</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private double Sum = 0;
    private List<Course> CoursesAll = new List<Course>();
    private List<Course> UnenrolledCourses = new List<Course>();
    private List<Course> EnrolledCourses = new List<Course>();
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        // Fetch all courses
        CoursesAll = _context.Courses.ToList();

        // Get the user's identity
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

        // Refresh the data on page load
        RefreshData();
    }

    private void RefreshData()
    {
        // Clear old data
        EnrolledCourses.Clear();
        UnenrolledCourses.Clear();
        Sum = 0;

        // Fetch the user's enrolled courses
        var courseUserEnrollments = _context.CourseUsers.Where(cu => cu.UserId == userId).ToList();

        // Get enrolled courses
        foreach (var enrollment in courseUserEnrollments)
        {
            var course = CoursesAll.FirstOrDefault(c => c.Id == enrollment.CourseId);
            if (course != null)
            {
                EnrolledCourses.Add(course);
                Sum += course.Fee;
            }
        }

        // Find unenrolled courses
        var enrolledCourseIds = EnrolledCourses.Select(c => c.Id).ToList();
        UnenrolledCourses = CoursesAll.Where(c => !enrolledCourseIds.Contains(c.Id)).ToList();

        StateHasChanged();
    }

    private async Task Enroll(Course course)
    {
        // Enroll the user in the selected course
        var courseUser = new CourseUser
            {
                CourseId = course.Id,
                UserId = userId
            };

        _context.CourseUsers.Add(courseUser);
        await _context.SaveChangesAsync();
        RefreshData();
    }

    private async Task Drop(Guid courseId)
    {
        // Find and remove the user's enrollment for the selected course
        var courseUser = _context.CourseUsers.FirstOrDefault(cu => cu.CourseId == courseId && cu.UserId == userId);
        if (courseUser != null)
        {
            _context.CourseUsers.Remove(courseUser);
            await _context.SaveChangesAsync();
            RefreshData();
        }
    }
}

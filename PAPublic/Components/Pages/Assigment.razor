@page "/create-assignment"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@using System.Security.Claims
@inject ApplicationDbContext _context
@inject NavigationManager _navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<h3>Create Assignment</h3>

@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}

<EditForm Model="@assignment" OnValidSubmit="CreateAssignment">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Title</label>
        <InputText @bind-Value="@assignment.Title" class="form-control" />
        <ValidationMessage For="@(() => assignment.Title)" />
    </div>

    <div class="form-group">
        <label>Description</label>
        <InputTextArea @bind-Value="@assignment.Description" class="form-control" />
        <ValidationMessage For="@(() => assignment.Description)" />
    </div>

    <div class="form-group">
        <label>Due Date</label>
        <input type="date" @bind="assignment.DueDate" min="@DateTime.Today.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)" class="form-control" />
        <ValidationMessage For="@(() => assignment.DueDate)" />
    </div>

    <div class="form-group">
        <label>PDF File</label>
        <InputFile OnChange="HandlePdfUpload" MaxAllowedSize="5242880" /> <!-- 5 MB -->

        <ValidationMessage For="@(() => assignment.PdfData)" />
    </div>

    <div class="form-group">
        <label for="UserId">Teacher</label>
        <br />
        <InputSelect id="CourseId" @bind-Value="assignment.CourseId">
            <option value="">--</option>
            @foreach (var item in courses)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    private IList<Course> courses = new List<Course>();

    private string userId;
    private Assignment assignment = new Assignment { DueDate = DateTime.Today };

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        courses = _context.Courses.Where(c => c.UserId == userId).ToList();
    }

    private async Task HandlePdfUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);
            assignment.PdfData = stream.ToArray();
        }
        catch (Exception ex)
        {
            errorMessage = $"File upload failed: {ex.Message}";
        }
    }

    private async Task CreateAssignment()
    {
        _context.Assignments.Add(assignment);
        await _context.SaveChangesAsync();

        await JSRuntime.InvokeVoidAsync("alert", "Assignment created successfully!");
        _navigation.NavigateTo("/assignments");
    }
}

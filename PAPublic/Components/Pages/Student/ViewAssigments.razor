@page "/View/Assignment/{ID:guid}"
@using PADatabase.Models
@using System.IO
@inject PAPublic.IPdfService assignmentService
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext _context
@inject IJSRuntime jsRuntime

<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <h3>View Assignment</h3>
            <table class="table table-striped table-bordered mt-3">
                <thead class="table-light">
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Due Date</th>
                        <th>Upload PDF</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in assigmenmtList)
                    {
                        <tr>
                            <td>@item.Title</td>
                            <td>@item.Description</td>
                            <td>
                                @if (item.PdfData != null)
                                {
                                    <button class="btn btn-primary me-2" @onclick="() => DownloadPdf(item.Id)">Download PDF</button>
                                    <a href="/Submit/Assignment/@item.Id" class="btn btn-success">Submit Assignment</a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>



@code{
    [Parameter]
    public Guid ID { get; set; }
    AssigmentStudent assigmetstudent = new AssigmentStudent();
    List<AssigmentStudent> assigmenmtListStud = new List<AssigmentStudent>();
    List<Assignment> assigmenmtList = new List<Assignment>();
    string authid;
    protected override async Task OnInitializedAsync()
    {
     

        
        GetAllAssignments(ID);
    }
    private void GetAllAssignments(Guid id)
    {
        assigmenmtList = _context.Assignments.Where(c => c.CourseId == ID).ToList();
    }

    private async Task DownloadPdf(Guid assignmentId)
    {
        var assignment = assigmenmtList.FirstOrDefault(x => x.Id == assignmentId);
        if (assignment != null && assignment.PdfData != null)
        {
            await jsRuntime.InvokeVoidAsync("saveAsFile", assignment.Title + ".pdf", Convert.ToBase64String(assignment.PdfData));
        }

    }




}


@page "/Submit/Assigment/{ID:guid}"
<h3>SubmitAssigment</h3>
@using PADatabase.Models
@using System.IO
@inject PAPublic.IPdfService assignmentService
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext _context
@inject IJSRuntime jsRuntime


<button class="btn btn-success" style="float:left;margin-right:5px;" @onclick="SaveAssignment">Save</button>
<div style="float:left;margin-right:5px;">
    <label>Any Comments for the Teacher</label>
    <input type="text" @bind="assigmetstudent.comments" />


</div>
@if (assigmetstudent != null){
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Upload PDF</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        
            <tr>
            <td>@assigmetstudent.comments</td>
              
                <td>
                <InputFile OnChange="@(e => HandleFileSelected(e, assigmetstudent.Id))" />
                </td>
                <td>
                @if (assigmetstudent.PdfData != null)
                {
                    <button class="btn btn-primary" @onclick="() => DownloadPdf(assigmetstudent.Id)">Download PDF</button>
                    <button class="btn btn-primary" style="float:left;" @onclick="AddNew">Add New</button>
                   
                }
                </td>
            </tr>
        }
    </tbody>
    </table>
}else
{
    <h1>hello</h1>
}
@code {

    [Parameter]
    public Guid ID { get; set; }

    AssigmentStudent assigmetstudent = new AssigmentStudent();


    string authid;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        authid = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

         assigmetstudent = await _context.AssigmentStudent.FirstOrDefaultAsync(m => m.AssignmentId == ID);
    
        if (assigmetstudent == null)
        {
            assigmetstudent = new AssigmentStudent();
        }

    }


    private void SaveAssignment()
    {

        if (assigmetstudent.Id == Guid.Empty)
        {

            assigmetstudent.AssignmentId = ID;
            assigmetstudent.UserId = authid;
            assigmetstudent.DueDate = DateTime.Now; // This line sets the DueDate to the current date and time
            _context.AssigmentStudent.Add(assigmetstudent);
            _context.SaveChanges();


        }
        else
        {
            // Update existing assignment
            _context.AssigmentStudent.Update(assigmetstudent);
            _context.SaveChanges();
        }

    }
    private void AddNew()
    {
        assigmetstudent = new AssigmentStudent();
    }
    public async Task<byte[]> FileSender(IBrowserFile file)
    {
        using var ms = new MemoryStream();
        await file.OpenReadStream(maxAllowedSize: 5242880).CopyToAsync(ms); // 5 MB limit
        return ms.ToArray();
    }

    async void HandleFileSelected(InputFileChangeEventArgs e,Guid assimgentstudent)
    {
        var attach = await FileSender(e.File);
        _context.AssigmentStudent.SingleOrDefault(x => x.Id == assimgentstudent).PdfData = attach;
        _context.SaveChanges();
        assigmetstudent = await _context.AssigmentStudent.FirstOrDefaultAsync(m => m.AssignmentId == ID);
    
    }


    private async Task DownloadPdf(Guid assignmentId)
    {
        var assignment = await _context.AssigmentStudent.FirstOrDefaultAsync(m => m.Id == assignmentId);
        if (assignment != null && assignment.PdfData != null)
        {
            await jsRuntime.InvokeVoidAsync("saveAsFile", assignment.comments + ".pdf", Convert.ToBase64String(assignment.PdfData));
        }

    }

}

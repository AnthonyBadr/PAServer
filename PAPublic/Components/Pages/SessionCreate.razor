@page "/Session/Create"
<h3>Add Session</h3>
@using PADatabase.Models
@using PADatabase.Forms
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigation
@inject ApplicationDbContext _context
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<IdentityUser> UserManager
@using System.Security.Claims


@if (loading)
{
    <div class="loading-overlay">
        <div class="loading-spinner">
            Loading...
        </div>
    </div>
}
else
{

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">

        <div style="display: flex;">
            <h4 style="margin-right: 10px;">Selected Items:</h4>
            @foreach (var selectedItem in GetSelectedItems())
            {
                <p style="margin-right: 10px;">@selectedItem.StudentDetails.FirstName</p>
            } 
        </div>

        @if (IsDropdownOpen)
        {
            <div class="dropdown">
                <button @onclick="ToggleDropdown">Toggle Dropdown</button>
                <div class="dropdown-content">
                    <div class="scroll-box">
                        @if (UserPersonalDetailsList != null && UserPersonalDetailsList.Any())
                        {
                            @foreach (var item in UserPersonalDetailsList)
                            {
                                <div class="checklist-item">
                                    <input type="checkbox" @bind="item.IsChecked" />
                                    <label>@item.StudentDetails.FirstName @item.StudentDetails.LastName</label>
                                </div>
                            }
                        }
                        else
                        {
                            <p>No items to display.</p>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <button @onclick="ToggleDropdown">Select Student/s</button>
        }




        <EditForm Model="@Session" OnValidSubmit="CreateSession">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="Description" class="form-label">Description</label>
                <InputText id="description" @bind-Value="Session.description" class="form-control" />
                <ValidationMessage For="@(() => Session.description)" class="text-danger" />
            </div>

            <div class="form-group mb-3">
                <label for="Location" class="form-label">Location</label>
                <InputText id="location" @bind-Value="Session.Location" class="form-control" />
                <ValidationMessage For="@(() => Session.Location)" class="text-danger" />
            </div>

            <div class="form-group mb-3">
                <label for="DateofLesson" class="form-label">Date of Session</label>
                <InputDate id="DateofLesson" @bind-Value="Session.DateofLesson" class="form-control" />
                <ValidationMessage For="@(() => Session.DateofLesson)" class="text-danger" />
            </div>
            <div class="form-group mb-3">
                <label for="StartTime" class="form-label">Start Time of Lesson</label>
                <input id="StartTime" type="time" @bind="Session.StartTime" class="form-control" />
                <ValidationMessage For="@(() => Session.StartTime)" class="text-danger" />
            </div>

            <div class="form-group mb-3">
                <label class="form-label">Time Difference</label>
                <p>@TimeDifferenceInHours</p>
            </div>

            <div class="form-group mb-3">
                <label for="EndTime" class="form-label">EndTime Time of Lesson</label>
                <input id="EndTime" type="time" @bind="Session.EndTime" class="form-control" />
                <ValidationMessage For="@(() => Session.EndTime)" class="text-danger" />
            </div>


            
            <div class="form-group mb-3">
                <label for="PackageCodeListId" class="form-label">Package Code</label>
                <select id="packageCodeListId" @bind="@Session.PackageCodeListId" class="form-control">
                    @foreach (var packageCode in PackageCodeList)
                    {
                        <option value="@packageCode.Id">@packageCode.Pckg_Name</option>
                    }
                </select>
                <ValidationMessage For="@(() => Session.PackageCodeListId)" class="text-danger" />
            </div>


            <button type="submit" class="btn btn-primary">Create</button>
            <a href="Index" class="btn btn-secondary ms-2">Back to Courses</a>
        </EditForm>
            <!-- Dropdown Section -->
         

           

    </div>
</div>

}

<style>
    /* Inline CSS for ChecklistDropdown component */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: block;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 200px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        max-height: 200px; /* Max height of the dropdown content */
        overflow-y: auto; /* Enable vertical scrollbar */
        padding: 10px; /* Add padding to the dropdown content */
    }

    .checklist-item {
        margin-bottom: 5px;
    }
</style>

@code {
    private Session Session = new Session();
    private bool loading;
    private IList<PackageCodeList> PackageCodeList = new List<PackageCodeList>();
    protected List<Studentform> selectedStduentsafterChecking { get; set; } = new List<Studentform>();
    protected List<Studentform> StudentsFormList { get; set; } = new List<Studentform>();
    public List<DetailsForm> UserPersonalDetailsList { get; set; } = new List<DetailsForm>();
    public List<DetailsForm> selectedUserDetails { get; set; } = new List<DetailsForm>();
    protected List<string> selectedStudentIds { get; set; } = new List<string>();
    public SessionStudent sessionUser { get; set; }
    public UserSummaries userSummary { get; set; }
    string authid;
    public double Sum { get; set; } 
    // Dropdown functionality
    private bool IsDropdownOpen { get; set; }


    // Computed property to calculate time difference in hours
    private double TimeDifferenceInHours
    {
        get
        {
            if (Session.StartTime == TimeOnly.MinValue || Session.EndTime == TimeOnly.MinValue)
            {
                return 0;
            }
            else
            {
                var timeDiff = Session.EndTime - Session.StartTime;
                return timeDiff.TotalHours;
            }
        }
    }




    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        authid = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

        Session.DateofLesson = DateOnly.FromDateTime(DateTime.Now);

        PackageCodeList = await _context.PackageCodeLists.ToListAsync();

        var studentRole = await _roleManager.Roles.SingleOrDefaultAsync(r => r.Name == "Student");
        if (studentRole != null)
        {
            var students = await UserManager.GetUsersInRoleAsync(studentRole.Name);
            var studentIds = students.Select(u => u.Id).ToList();
            var userDetails = await _context.UserPersonalDetails
                .Where(upd => studentIds.Contains(upd.UserId))
                .ToListAsync();

            UserPersonalDetailsList = userDetails.Select(x => new DetailsForm
                {
                    StudentDetails = x,
                    IsChecked = false
                }).ToList();

            StudentsFormList = students.Select(student => new Studentform(student, false)).ToList();
        }
        loading = false;
    }



    private void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }


    public List<DetailsForm> GetSelectedItems()
    {
        selectedStduentsafterChecking = StudentsFormList.Where(item => item.IsChecked).ToList();
        selectedUserDetails = UserPersonalDetailsList.Where(item => item.IsChecked).ToList();
        return selectedUserDetails;
    }


    private async  void OnStudentCheckedChanged(DetailsForm DetailsForm)
    {
        if (DetailsForm.IsChecked)
        {
            if (!selectedStudentIds.Contains(DetailsForm.StudentDetails.UserId))
            {
                selectedStudentIds.Add(DetailsForm.StudentDetails.UserId);
            }
        }
        else
        {
            if (selectedStudentIds.Contains(DetailsForm.StudentDetails.UserId))
            {
                selectedStudentIds.Remove(DetailsForm.StudentDetails.UserId);
            }
        }
    }


    private int FindPaymentNumber(string UserId){
        var maxPaymentNumber = _context.UserSummaries
            .Where(x => x.UserId == "UserId")
            .Max(x => x.PaymentNumber);
        if (maxPaymentNumber ==0)
        {
            return 1;

        }
        else
        {
            return maxPaymentNumber + 1;
        }
        return 0;


    }



    private async Task CreateSession()
    {
        try
        {
            Session.UserId = authid;

            _context.Sessions.Add(Session);
            await _context.SaveChangesAsync();

            var upd = _context.UserPersonalDetails.Where(x => x.UserId == authid).FirstOrDefault();

            upd.numberOfHours = TimeDifferenceInHours;

            int index = 0;
            double SumofParentsPayment = 0;
            int pn=0;
            foreach (var studentId in selectedUserDetails)
            {


                sessionUser = new SessionStudent
                {
                    UserId = studentId.StudentDetails.UserId,
                    SessionId = Session.Id,
                     Session = Session
                };
                if (index == 0)
                {
                    sessionUser.DeleteButton = "true";
                }
                else
                {
                    sessionUser.DeleteButton = "false";
                }

                index++;
                _context.SessionStudents.Add(sessionUser);

                 pn=FindPaymentNumber(sessionUser.UserId);


                var payedNumber = _context.UserSummaries
                       .Where(x => x.Status == "Paid")  
                       .Select(x => x.PaymentNumber).FirstOrDefault();

              

                if (payedNumber == null)
                {
                    payedNumber = 1;
                }
                double s = sessionUser.Session.PackageCodeList.Price;

                SumofParentsPayment = sessionUser.Session.PackageCodeList.Price + SumofParentsPayment;
                if(  _context.UserSummaries.Where(x => x.UserId == studentId.StudentDetails.UserId  && x.Status == "Pending").Count() == 0)
                {



                    userSummary = new UserSummaries(
                      id: Guid.NewGuid(),
                      userId: studentId.StudentDetails.UserId,
                  money: s,
                      paymentNumber: payedNumber + 1,
                      nbHours: TimeDifferenceInHours,
                      status: "Pending",
                      amountPaid: 0
                 );
                    _context.UserSummaries.Add(userSummary);
                }
                else
                {
                    userSummary = _context.UserSummaries.Where(x => x.UserId == studentId.StudentDetails.UserId && x.Status == "Pending").FirstOrDefault();
                    userSummary.Money = userSummary.Money + s;
                    userSummary.NbHours = userSummary.NbHours + TimeDifferenceInHours;
                }
                sessionUser.UserSummariesId = userSummary.Id;

            }
            Sum = 0;
            for (int i = 0; i < selectedUserDetails.Count(); i++)
            {

                Sum = Sum+ sessionUser.Session.PackageCodeList.Price * (1 - (sessionUser.Session.PackageCodeList.percentBTAC + sessionUser.Session.PackageCodeList.percentLES));

            }
            var BTACSummary = _context.UserSummaries.Where(x => x.Status == "BTAC").FirstOrDefault();
            var LESSummary = _context.UserSummaries.Where(x => x.Status == "LES").FirstOrDefault();
            double btacaddedPayment = SumofParentsPayment * sessionUser.Session.PackageCodeList.percentBTAC;
            double LESpayment = SumofParentsPayment*sessionUser.Session.PackageCodeList.percentLES;
            BTACSummary.Money = BTACSummary.Money + btacaddedPayment;
            LESSummary.Money = LESSummary.Money + LESpayment;
            var sess = _context.Sessions.Where(x => x.Id == Session.Id).FirstOrDefault();
            if (_context.UserSummaries.Where(x => x.UserId == authid && x.Status == "Pending").Count()==0)
            {
                var payedNumber = _context.UserSummaries
                    .Where(x => x.Status == "Paid")  // Add the status value or variable
                    .Select(x => x.PaymentNumber).FirstOrDefault();



                if (payedNumber == null)
                {
                    payedNumber = 1;
                }

                var userSummary = new UserSummaries(
                     id: Guid.NewGuid(),                
                     userId: authid,
                 money: Sum,
                     paymentNumber: payedNumber+1,
                     nbHours:TimeDifferenceInHours,                    
                     status: "Pending",
                     amountPaid: 0
                );


                _context.UserSummaries.Add(userSummary);


                sess.UserSummariesId = userSummary.Id;
                await _context.SaveChangesAsync();
            }
            else
            {
                var us = _context.UserSummaries.Where(x => x.UserId == authid && x.Status=="Pending").FirstOrDefault();
                us.Money = us.Money + Sum;
                us.NbHours = us.NbHours + TimeDifferenceInHours;
                sess.UserSummariesId = us.Id;
            }

            await _context.SaveChangesAsync();
            _navigation.NavigateTo("");
        }
        catch (Exception ex)    
        {
            Console.WriteLine($"Error creating session: {ex.Message}");
        }
    }

    public class Studentform
    {
        public IdentityUser Student { get; set; }
        public bool IsChecked { get; set; }

        // Constructor to initialize the properties
        public Studentform(IdentityUser student, bool isChecked)
        {
            Student = student;
            IsChecked = isChecked;
        }

        // Default constructor
        public Studentform() { }
    }
}

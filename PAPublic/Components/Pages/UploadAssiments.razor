@page "/Course/Assignment/{ID:guid}"
@using PADatabase.Models
@using System.IO
@inject PAPublic.IPdfService assignmentService
@using Microsoft.AspNetCore.Components.Forms

@inject ApplicationDbContext _context
@inject IJSRuntime jsRuntime

<h3 class="mt-4 mb-4">Assignments</h3>

<div class="card mb-4 shadow-sm">
    <div class="card-body">
        <h4 class="card-title">Create/Edit Assignment</h4>
        <hr />
        <div class="mb-3">
            <label for="title" class="form-label">Title of Assignment</label>
            <input type="text" class="form-control" id="title" @bind="assigmet.Title" />
        </div>
        <div class="mb-3">
            <label for="dueDate" class="form-label">Due Date</label>
            <input type="date" class="form-control" id="dueDate" @bind="assigmet.DueDate" />
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <input type="text" class="form-control" id="description" @bind="assigmet.Description" />
        </div>
        <button class="btn btn-success me-2" @onclick="SaveAssignment">Save</button>
        <button class="btn btn-primary" @onclick="AddNew">Add New</button>
    </div>
</div>

<table class="table table-striped table-bordered shadow-sm">
    <thead class="table-light">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Upload PDF</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in assigmenmtList)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.Description</td>
                <td>
                    <InputFile OnChange="@(e => HandleFileSelected(e, item.Id))" />
                </td>
                <td>
                    <button class="btn btn-primary me-2" @onclick="() => EditAssignment(item)">Edit</button>
                    <button class="btn btn-danger me-2" @onclick="() => DeletAssigment(item)">Delete</button>
                    @if (item.PdfData != null)
                    {
                        <button class="btn btn-primary me-2" @onclick="() => DownloadPdf(item.Id)">Download PDF</button>
                        <button class="btn btn-danger" @onclick="() => DeletePdf(item.Id)">Delete PDF</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter]
    public Guid ID { get; set; }

    Assignment assigmet = new Assignment();
    List<Assignment> assigmenmtList = new List<Assignment>();

    protected override async Task OnInitializedAsync()
    {
        GetAllAssignments();
    }

    private void GetAllAssignments()
    {
        assigmenmtList = assignmentService.GetAssimgents(ID);
    }

    private void AddNew()
    {
        assigmet = new Assignment();
    }

    private void SaveAssignment()
    {
        if (assigmet.Id == Guid.Empty)
        {
            // Add new assignment
            assignmentService.Save(assigmet, ID);
        }
        else
        {
            // Update existing assignment
            assignmentService.Update(assigmet);
        }
        assigmet = new Assignment();
        GetAllAssignments();
    }

    async void HandleFileSelected(InputFileChangeEventArgs e, Guid assignmentId)
    {
        var attach = await FileSender(e.File);
        assignmentService.Upload(assignmentId, attach);
        GetAllAssignments(); // Update the list after upload
    }

    public async Task<byte[]> FileSender(IBrowserFile file)
    {
        using var ms = new MemoryStream();
        await file.OpenReadStream(maxAllowedSize: 5242880).CopyToAsync(ms); // 5 MB limit
        return ms.ToArray();
    }

    private void DeletePdf(Guid assignmentId)
    {
        assignmentService.Delete(assignmentId);
        GetAllAssignments();
    }

    public async void DeletAssigment(Assignment a)
    {
        _context.Assignments.Remove(a);
        await _context.SaveChangesAsync();
        assigmenmtList.Remove(a);
        StateHasChanged();
    }

    private async Task DownloadPdf(Guid assignmentId)
    {
        var assignment = assigmenmtList.FirstOrDefault(x => x.Id == assignmentId);
        if (assignment != null && assignment.PdfData != null)
        {
            await jsRuntime.InvokeVoidAsync("saveAsFile", assignment.Title + ".pdf", Convert.ToBase64String(assignment.PdfData));
        }
        GetAllAssignments();
    }

    private void EditAssignment(Assignment assignment)
    {
        assigmet = assignment;
    }
}

@page "/Sessions"
<h3>Sessions</h3>
@using System.Security.Claims
@using PADatabase.Models
@using Microsoft.AspNetCore.Identity
@inject NavigationManager _navigation
@inject ApplicationDbContext _context
@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<IdentityUser> UserManager

<label for="packageCodeListId" class="form-label">Package Code</label>

<label for="userFilter" class="form-label">Filter by User</label>
<select id="userFilter" class="form-select" @onchange="OnUserSelected">
    <option value="7c6cb4c5-28b9-48c9-a2b3-e7fba3b4a954">---------</option>
    @foreach (var user in userDetails)
    {
        <option value="@user.UserId">@user.FirstName</option>
    }
</select>

<label for="packageFilter" class="form-label">Filter by Package</label>
<select id="packageFilter" class="form-select" @onchange="OnTutorSelected">
    <option value="7c6cb4c5-28b9-48c9-a2b3-e7fba3b4a954">---------</option>
    @foreach (var pl in PackageCodeList)
    {
        <option value="@pl.Id">@pl.Pckg_Name</option>
    }

}
else
{</select>

@if (PagedSessionStudent != null && PagedSessionStudent.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered shadow-sm">
            <thead class="table-light">
                <tr>
                    <th>Session#</th>
                    <th>Teacher</th>
                    <th>Location</th>
                    <th>Price</th>
                    <th>Package</th>
                    <th>Student</th>
                    <th>Date of Session</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Time Difference</th>
                    
                </tr>
            </thead>
            <tbody>
                @foreach (var item in PagedSessionStudent)
                {
                    <tr>
                           <td>@item.Session.SNumber</td>
                        <td>@item.Session.User.FirstName</td>
                        <td>@item.Session.Location</td>
                        <td>
                            @(
                                item.Session.PackageCodeList.Price *
                                (1 - (item.Session.PackageCodeList.percentLES + item.Session.PackageCodeList.percentBTAC))
                                )
                        </td>
                        <td>@item.Session.PackageCodeList.Description</td>
                        <td>@(item.User?.FirstName ?? "No User")</td>
                        <td>@item.Session.DateofLesson</td>
                        <td>@item.Session.StartTime</td>
                        <td>@item.Session.EndTime</td>
                        <td>
                            @{
                                var startTime = new DateTime(item.Session.DateofLesson.Year, item.Session.DateofLesson.Month, item.Session.DateofLesson.Day, item.Session.StartTime.Hour, item.Session.StartTime.Minute, 0);
                                var endTime = new DateTime(item.Session.DateofLesson.Year, item.Session.DateofLesson.Month, item.Session.DateofLesson.Day, item.Session.EndTime.Hour, item.Session.EndTime.Minute, 0);
                                var duration = endTime - startTime;
                                var totalHours = duration.TotalHours;
                            }
                            @totalHours.ToString("0.##") hours
                        </td>
                        @if (role!="Student")
                        {

                            @if (item.DeleteButton == "true")
                            {
                                <td>
                                    <button @onclick="() =>  ConfirmDelete(item.Session.Id)" class="btn btn-danger">Delete</button>
                                </td>
                            }
                        }

                    </tr>
                }
            </tbody>
        </table>
    </div>
    <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
    <span>Page @currentPage of @totalPages</span>
    <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
}
else
{
    

<div>
       
    </div>
    <div class="alert alert-warning">No sessions found.</div>
}

@code {
    private IList<Session> Sessions = new List<Session>();
    private IList<SessionStudent> SessionStudent = new List<SessionStudent>();
    private IList<SessionStudent> PagedSessionStudent = new List<SessionStudent>();
    private IList<PackageCodeList> PackageCodeList = new List<PackageCodeList>();
    private Guid PackageCodeListId { get; set; }
    private Guid? SelectedUserId { get; set; }
    List<Guid> sessionIds = new List<Guid>();
    List<UserPersonalDetails> UserPersonalDetails = new List<UserPersonalDetails>();
    List<UserPersonalDetails> userDetails = new List<UserPersonalDetails>();
    List<UserPersonalDetails> userDetailstutor = new List<UserPersonalDetails>();
    private string selectedUserId; // Holds the selected value
    private string  selectedPacakgeListId;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 5;
    string role;
    private async Task ConfirmDelete(Guid sessionId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this session?" });
        DeleteSession(sessionId);

    }

    private async Task DeleteSession(Guid sessionId)
    {
        double sumtoRemove = 0;
        double totlalSumSessionforperc = 0;
        var SessionstoDelete = _context.SessionStudents.Where(x => x.SessionId == sessionId).ToList();
        foreach (var item in SessionstoDelete)
        {
            double priceremoved = item.Session.PackageCodeList.Price * (1 - (item.Session.PackageCodeList.percentLES + item.Session.PackageCodeList.percentBTAC));
            double oenSessionStudent = item.Session.PackageCodeList.Price;
            sumtoRemove = sumtoRemove +priceremoved;
            totlalSumSessionforperc = totlalSumSessionforperc + item.Session.PackageCodeList.Price;
            var StuentPayment = _context.UserSummaries.Where(x => x.Id == item.UserSummariesId).FirstOrDefault();
            StuentPayment.Money = StuentPayment.Money - oenSessionStudent;
            _context.SessionStudents.Remove(item);
        }


        var Sessionone = _context.Sessions.Where(x => x.Id == sessionId).FirstOrDefault();
        var BTACSummary = _context.UserSummaries.Where(x => x.Status == "BTAC").FirstOrDefault();
        var LESSummary = _context.UserSummaries.Where(x => x.Status == "LES").FirstOrDefault();
        double btacaddedPayment = totlalSumSessionforperc * Sessionone.PackageCodeList.percentBTAC;
        double LESpayment = totlalSumSessionforperc * Sessionone.PackageCodeList.percentLES;
        BTACSummary.Money = BTACSummary.Money - btacaddedPayment;
        LESSummary.Money = LESSummary.Money - LESpayment;

        var TeacherPayment = _context.UserSummaries.Where(x => x.Id ==Sessionone.UserSummariesId).FirstOrDefault();
        _context.Sessions.Remove(Sessionone);

        TeacherPayment.Money = TeacherPayment.Money - sumtoRemove;
        _context.SaveChanges();

    }


    protected override async Task OnInitializedAsync()
    {

        var studentRole = await _roleManager.Roles.SingleOrDefaultAsync(r => r.Name == "Student");
        var studentIds = (await UserManager.GetUsersInRoleAsync(studentRole.Name)).Select(u => u.Id).ToList();
        userDetails = await _context.UserPersonalDetails
            .Where(upd => studentIds.Contains(upd.UserId))
            .ToListAsync();

        var tutorRole = await _roleManager.Roles.SingleOrDefaultAsync(r => r.Name == "Teacher");
        var tutorIds = (await UserManager.GetUsersInRoleAsync(tutorRole.Name)).Select(u => u.Id).ToList();
        userDetailstutor = await _context.UserPersonalDetails
            .Where(upd => tutorIds.Contains(upd.UserId))
            .ToListAsync();

        // Load initial data
        PackageCodeList = await _context.PackageCodeLists.ToListAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string authid = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
         role = authState.User.FindFirstValue(ClaimTypes.Role);


        if (role == "Student")
        {
            SessionStudent = _context.SessionStudents.Where(c => c.UserId == authid)
             .Include(p => p.User)
            .Include(p => p.Session)
                .ThenInclude(s => s.PackageCodeList)
            .ToList();
            
            UpdatePagination();
        }else
        {

            Sessions = _context.Sessions.Where(c => c.UserId == authid).ToList();
            sessionIds = Sessions.Select(s => s.Id).ToList();
            callallSession();
        }


        UserPersonalDetails = _context.UserPersonalDetails.ToList();
     


    }


  

    private void callallSession()
    {
        SessionStudent = _context.SessionStudents
            .Where(p => sessionIds.Contains(p.SessionId))
            .Include(p => p.User)
            .Include(p => p.Session)
                .ThenInclude(s => s.PackageCodeList)
            .ToList();

        UpdatePagination();
        StateHasChanged();
    }


    public void OnUserSelected(ChangeEventArgs e)
    {
        selectedUserId = e.Value.ToString();
        if (selectedUserId == "7c6cb4c5-28b9-48c9-a2b3-e7fba3b4a954")
        {
            selectedUserId = null;
        }
        Filter();
     }

    private void OnTutorSelected(ChangeEventArgs e)
    {
        selectedPacakgeListId = e.Value.ToString();
        if (selectedPacakgeListId == "7c6cb4c5-28b9-48c9-a2b3-e7fba3b4a954")
        {
            selectedPacakgeListId = null;
        }
        Filter();
    }

    public void Filter()
    {
        SessionStudent = _context.SessionStudents.ToList();

        if (selectedUserId != null)
        {
            SessionStudent = SessionStudent.Where(x => x.UserId == selectedUserId).ToList();
        }

        if (selectedPacakgeListId != null)
        {
            SessionStudent = SessionStudent.Where(x => x.Session.PackageCodeListId == Guid.Parse(selectedPacakgeListId)).ToList();
        }

        UpdatePagination();
    }




    private void UpdatePagination()
    {
        totalPages = (int)Math.Ceiling(SessionStudent.Count / (double)pageSize);
        PagedSessionStudent = SessionStudent.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            currentPage++;
            UpdatePagination();
        }
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            currentPage--;
            UpdatePagination();
        }
    }

    private bool HasNextPage => currentPage < totalPages;
    private bool HasPreviousPage => currentPage > 1;
}

<style>
    .table-responsive {
        overflow-x: auto; /* Allow horizontal scrolling on small screens */
    }

    table {
        width: 100%; /* Ensure table uses full width of container */
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #f4f4f4;
    }

    .form-select {
        margin-bottom: 15px;
    }
</style>

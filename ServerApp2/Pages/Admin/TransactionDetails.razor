@page "/transaction/{userId}"

@using System
@using PADatabase.Models
@using Microsoft.EntityFrameworkCore

<h3 class="mt-4 mb-4">Transaction Details</h3>

<form @onsubmit="HandleFormSubmit" class="needs-validation">
    <input type="hidden" name="UserId" value="@UserId" />

    <div class="form-group mb-3">
        <label for="date" class="form-label">Date:</label>
        <input type="date" id="date" @bind="DummyTransaction.date_T" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="amount" class="form-label">Amount:</label>
        <input type="number" id="amount" step="0.01" @bind="DummyTransaction.amount" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="comment" class="form-label">Comment:</label>
        <input type="text" id="comment" @bind="DummyTransaction.comment" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Submit Transaction</button>
</form>

@if (SubmittedTransaction != null)
{
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Submitted Transaction Details</h5>
            <p><strong>Transaction ID:</strong> @SubmittedTransaction.Id</p>
            <p><strong>Comment:</strong> @SubmittedTransaction.comment</p>
        </div>
    </div>
}

@code {
    [Parameter] public string UserId { get; set; }
    private Transaction DummyTransaction { get; set; } = new Transaction();
    private Transaction SubmittedTransaction { get; set; }

    // Inject your ApplicationDbContext here
    [Inject] private ApplicationDbContext _context { get; set; }

    private async Task HandleFormSubmit()
    {
        DummyTransaction.Id = Guid.NewGuid();
        DummyTransaction.UserId = UserId; // Set the user ID

        // Save the transaction details to the database
        _context.Transactions.Add(DummyTransaction);
        await _context.SaveChangesAsync();

        // Update the payment amount in the PaymentUser table
        var existingPaymentUser = await _context.PaymentUsers.FirstOrDefaultAsync(p => p.UserId == UserId);

        if (existingPaymentUser != null)
        {
            existingPaymentUser.payment -= DummyTransaction.amount ?? 0; // Deduct the payment
            await _context.SaveChangesAsync();
        }

        SubmittedTransaction = DummyTransaction;
    }
}
